(in-package :transport.server)

(defun send-message (host port message)
  (let ((data (string-to-octets message)))
    (send-data host port (generate-reply-head (length data)) data)))

(defun host-to-string (octes)
  (format nil "~A.~A.~A.~A" (elt octes 0) (elt octes 1) (elt octes 2) (elt octes 3)))

(let ((socket-thread nil)
      (port 0))
  (defun server-runp ()
    (and socket-thread (thread-alive-p socket-thread)))
  (labels ((run-server (stream test)
             (format t "Create the connection:~%")
             (format t "Auto port:~A~%" *auto-port*)
             (format t "IP:~A, Port:~A~%" *remote-host* *remote-port*)
             (let ((head (make-array (read-byte stream) :initial-element nil)))
               (read-sequence head stream)
               (format t "head-len:~A~%" (length head))
               (let ((head-json (decode-head head)))
                 (format t "head-json:--------~%~A~%---------~%" head-json)
                 (format t "i-size:~A~%" (get-data :isize head-json))
                 (cond ((string= "sendFile" (get-data :command head-json)) 
                        (let ((data (make-array (get-data :isize head-json) :initial-element nil)))
                          (format t "Starting recive~%")
                          (read-sequence data stream)
                          (save-file (get-data :name head-json) data)
                          (format t "Finish~%")))
                       ((string= "reply" (get-data :command head-json))
                        (let ((event-data (getf (get-event "wait-reply") :data))
                              (data (make-array (get-data :size head-json) :initial-element nil)))
                          (format t "Starting recive~%")
                          (read-sequence data stream)
                          (format t "Starting parse~%")
                          (format t "The Data:~A~%" (octets-to-string data))
                          (format t "*remote-host*:~A~%" (host-to-string *remote-host*))
                          (format t "event-data:~A~%" (first event-data))
                          (if (and (string= (host-to-string *remote-host*) (first event-data)))
                              (fire-event "wait-reply" (octets-to-string data))
                              (error-f "run-server" "in wait-reply, the port or host is not the event"))
                          (format t "Finish~%")))
                       ((string= "addnode" (get-data :command head-json))
                        (add-node (get-data :sender head-json) (host-to-string *remote-host*) (get-data :port head-json)))
                       (t (format t "Not now command~%")))
                 (when (get-data :return head-json)
                   (format t "send reply~%")
                   (send-message *remote-host* (get-data :port head-json) "finish"))))))
    (defun start-server ()
      (when (not (server-runp))
        (multiple-value-bind (thread socket) (socket-server "127.0.0.1" 0 #'run-server (list 1) :in-new-thread t :element-type :default :multi-threading t)
          (setf socket-thread thread)
          (setf port (get-local-port socket))
          (set-port port)))))
  (defun stop-server ()
    (when (server-runp)
      (setf socket-thread (destroy-thread socket-thread))))
  (defun restart-server ()
    (stop-server)
    (start-server)))

(in-package :cl-user)
